// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebShop.Dal.Context;

namespace WebShop.Dal.Migrations
{
    [DbContext(typeof(WebShopDbContext))]
    partial class WebShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebShop.Dal.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("WebShop.Dal.Models.CompletPC", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CpuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GpuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MotherBoardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PowerSupplyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CpuId");

                    b.HasIndex("GpuId");

                    b.HasIndex("MotherBoardId");

                    b.HasIndex("PowerSupplyId");

                    b.ToTable("CompletPCs");
                });

            modelBuilder.Entity("WebShop.Dal.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Available")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountedPrice")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpectedAvailalbleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OriginalPrice")
                        .HasColumnType("int");

                    b.Property<string>("PicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Warranty")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Items");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Item");
                });

            modelBuilder.Entity("WebShop.Dal.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("WebShop.Dal.Models.PC_Drive", b =>
                {
                    b.Property<Guid>("PcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompletPCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DriveId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PcId");

                    b.HasIndex("CompletPCId");

                    b.ToTable("PC_Drives");
                });

            modelBuilder.Entity("WebShop.Dal.Models.PC_Memory", b =>
                {
                    b.Property<Guid>("PcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompletPCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PcId");

                    b.HasIndex("CompletPCId");

                    b.ToTable("PC_Memories");
                });

            modelBuilder.Entity("WebShop.Dal.Models.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("ItemId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("WebShop.Dal.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WebShop.Dal.Models.Case", b =>
                {
                    b.HasBaseType("WebShop.Dal.Models.Item");

                    b.Property<int>("BuiltInFanNumber")
                        .HasColumnType("int");

                    b.Property<int>("Depth")
                        .HasColumnType("int");

                    b.Property<int>("HDDNumber")
                        .HasColumnType("int");

                    b.Property<int>("Heigth")
                        .HasColumnType("int");

                    b.Property<int>("SupportedMotherboard")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Case");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04092a85-820c-4d74-bb16-d8211d9a0486"),
                            Available = 10,
                            Description = "Very nice case",
                            Manufacturer = "Thermaltake",
                            Name = "Thermaltake CA-1P6-00F1WN-00 Level 20 HT számítógépház fekete",
                            OriginalPrice = 59000,
                            PicturePath = "",
                            Warranty = "3 years",
                            BuiltInFanNumber = 3,
                            Depth = 503,
                            HDDNumber = 4,
                            Heigth = 613,
                            SupportedMotherboard = 0,
                            Width = 468
                        },
                        new
                        {
                            Id = new Guid("f4099481-9168-45cf-ad0d-8a1ff5eb125d"),
                            Available = 10,
                            Description = "Very white and big case",
                            Manufacturer = "DeepCool",
                            Name = "DeepCool EARLKASE RGB WH fehér számítógép ház",
                            OriginalPrice = 59000,
                            PicturePath = "",
                            Warranty = "3 years",
                            BuiltInFanNumber = 3,
                            Depth = 500,
                            HDDNumber = 4,
                            Heigth = 511,
                            SupportedMotherboard = 0,
                            Width = 204
                        });
                });

            modelBuilder.Entity("WebShop.Dal.Models.Hardware", b =>
                {
                    b.HasBaseType("WebShop.Dal.Models.Item");

                    b.Property<int>("BaseClock")
                        .HasColumnType("int");

                    b.Property<int>("TDP")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Hardware");
                });

            modelBuilder.Entity("WebShop.Dal.Models.Cpu", b =>
                {
                    b.HasBaseType("WebShop.Dal.Models.Hardware");

                    b.Property<int>("CoreNumber")
                        .HasColumnType("int");

                    b.Property<string>("ProcessorFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Socket")
                        .HasColumnType("int");

                    b.Property<int>("Technology")
                        .HasColumnType("int");

                    b.Property<int>("ThreadNumber")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Cpu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f90a3c5a-9d32-4c9b-bc0b-003fc6c0c246"),
                            Available = 10,
                            Description = "So basic processor",
                            Manufacturer = "AMD",
                            Name = "AMD Ryzen 3 2200G",
                            OriginalPrice = 31500,
                            PicturePath = "",
                            Warranty = "5 years",
                            BaseClock = 3400,
                            TDP = 65,
                            Weight = 0,
                            CoreNumber = 4,
                            ProcessorFamily = "AMD Ryzen 3",
                            Socket = 3,
                            Technology = 14,
                            ThreadNumber = 4
                        },
                        new
                        {
                            Id = new Guid("b6ffb02a-3623-43fa-bed6-2886eb6f26cb"),
                            Available = 10,
                            Description = "Very good gaming processor",
                            Manufacturer = "Intel",
                            Name = "Intel Core i5-9600K",
                            OriginalPrice = 82000,
                            PicturePath = "",
                            Warranty = "3 years",
                            BaseClock = 3700,
                            TDP = 65,
                            Weight = 0,
                            CoreNumber = 6,
                            ProcessorFamily = "Intel core 5",
                            Socket = 10,
                            Technology = 14,
                            ThreadNumber = 6
                        });
                });

            modelBuilder.Entity("WebShop.Dal.Models.GraphicsCard", b =>
                {
                    b.HasBaseType("WebShop.Dal.Models.Hardware");

                    b.Property<int>("BandWidth")
                        .HasColumnType("int");

                    b.Property<int>("BuiltInMemory")
                        .HasColumnType("int");

                    b.Property<string>("CoolerType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemoryClock")
                        .HasColumnType("int");

                    b.Property<int>("MemoryType")
                        .HasColumnType("int");

                    b.Property<string>("PowerSupplyConnection")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("GraphicsCard");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be11e82a-d759-4f14-9a3d-3dfc1980ec37"),
                            Available = 3,
                            Description = "High end gpu in amazing white color",
                            Manufacturer = "Gigabyte",
                            Name = "Gigabyte RTX2070 Super 8GB GDDR6 GV-N207SGAMINGOC WHITE-8GD videokártya",
                            OriginalPrice = 216000,
                            PicturePath = "",
                            Warranty = "5 years",
                            BaseClock = 1770,
                            TDP = 215,
                            Weight = 0,
                            BandWidth = 256,
                            BuiltInMemory = 8192,
                            CoolerType = "Windforce 3x",
                            MemoryClock = 14000,
                            MemoryType = 7,
                            PowerSupplyConnection = "6 + 8"
                        },
                        new
                        {
                            Id = new Guid("6d1f6d66-ca74-47d0-a41e-7b06d13ef4b1"),
                            Available = 15,
                            Description = "Low end basic graphics card for work",
                            Manufacturer = "MSI",
                            Name = "MSI Radeon RX 5500 XT MECH 8G OC videokártya",
                            OriginalPrice = 85500,
                            PicturePath = "",
                            Warranty = "3 years",
                            BaseClock = 1845,
                            TDP = 130,
                            Weight = 0,
                            BandWidth = 128,
                            BuiltInMemory = 8192,
                            CoolerType = "Active",
                            MemoryClock = 14000,
                            MemoryType = 7,
                            PowerSupplyConnection = "8"
                        });
                });

            modelBuilder.Entity("WebShop.Dal.Models.HardDrive", b =>
                {
                    b.HasBaseType("WebShop.Dal.Models.Hardware");

                    b.Property<int>("ReadSpeed")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Socket")
                        .HasColumnName("HardDrive_Socket")
                        .HasColumnType("int");

                    b.Property<int>("WriteSpeed")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("HardDrive");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0ce851c3-827a-4372-8ae7-d59f817a3023"),
                            Available = 20,
                            Description = "Very fast SSD ",
                            Manufacturer = "Samsung",
                            Name = "Samsung 250GB 970 EVO Plus MZ-V7S250BW M.2 PCIe SSD meghajtó",
                            OriginalPrice = 28600,
                            PicturePath = "",
                            Warranty = "5 years",
                            BaseClock = 0,
                            TDP = 0,
                            Weight = 0,
                            ReadSpeed = 3500,
                            Size = 250,
                            Socket = 2,
                            WriteSpeed = 2300
                        },
                        new
                        {
                            Id = new Guid("f3212a53-9952-40bb-a62f-2487ca73c321"),
                            Available = 50,
                            Description = "Resonably fast SSD ",
                            Manufacturer = "Kingston",
                            Name = "Kingston 240GB SA400S37/240G SSD meghajtó",
                            OriginalPrice = 14000,
                            PicturePath = "",
                            Warranty = "5 years",
                            BaseClock = 0,
                            TDP = 0,
                            Weight = 0,
                            ReadSpeed = 500,
                            Size = 240,
                            Socket = 1,
                            WriteSpeed = 350
                        },
                        new
                        {
                            Id = new Guid("fe80a0c0-c034-4a6b-8b1f-bbd14788323f"),
                            Available = 20,
                            Description = "Biggest HDD you've ever seen",
                            Manufacturer = "Seagate",
                            Name = "Seagate SkyHawk Surveillance 10TB 7200rpm 256MB SATA3 3,5\" HDD",
                            OriginalPrice = 108000,
                            PicturePath = "",
                            Warranty = "5 years",
                            BaseClock = 0,
                            TDP = 0,
                            Weight = 0,
                            ReadSpeed = 50,
                            Size = 10000,
                            Socket = 0,
                            WriteSpeed = 35
                        });
                });

            modelBuilder.Entity("WebShop.Dal.Models.Memory", b =>
                {
                    b.HasBaseType("WebShop.Dal.Models.Hardware");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("Kit")
                        .HasColumnType("int");

                    b.Property<int>("MemoryType")
                        .HasColumnName("MemoryType1")
                        .HasColumnType("int");

                    b.Property<int>("Timing")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Memory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("90734580-ca21-404b-956d-d5c98a6c44c6"),
                            Available = 20,
                            Description = "High end memory in amazing white color",
                            Manufacturer = "Kingston",
                            Name = "Kingston 2x8GB DDR4 3200MHz HyperX Predator XMP HX432C16PB3K2/16 memória",
                            OriginalPrice = 38000,
                            PicturePath = "",
                            Warranty = "5 years",
                            BaseClock = 3200,
                            TDP = 0,
                            Weight = 0,
                            Capacity = 8,
                            Kit = 2,
                            MemoryType = 3,
                            Timing = 16
                        },
                        new
                        {
                            Id = new Guid("ef0f10d9-f90c-4197-a752-c71abdce0b8e"),
                            Available = 20,
                            Description = "High end memory with inbuilt RGB for so many fps!!!",
                            Manufacturer = "Kingston",
                            Name = "Kingston 2x8GB DDR4 3200MHz HyperX Predator RGB HX432C16PB3AK2/16 memória",
                            OriginalPrice = 41000,
                            PicturePath = "",
                            Warranty = "5 years",
                            BaseClock = 3200,
                            TDP = 0,
                            Weight = 0,
                            Capacity = 8,
                            Kit = 2,
                            MemoryType = 3,
                            Timing = 16
                        });
                });

            modelBuilder.Entity("WebShop.Dal.Models.Motherboard", b =>
                {
                    b.HasBaseType("WebShop.Dal.Models.Hardware");

                    b.Property<string>("Chipset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemorySocketNumber")
                        .HasColumnType("int");

                    b.Property<int>("Socket")
                        .HasColumnName("Motherboard_Socket")
                        .HasColumnType("int");

                    b.Property<string>("SupportedMemorySpeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupportedMemoryType")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Motherboard");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d406cec-4a45-4b25-86b1-7b7969bd8e83"),
                            Available = 20,
                            Description = "Great motherboard. Gets shit done",
                            Manufacturer = "ASUS",
                            Name = "Asus Prime Z390-A alaplap",
                            OriginalPrice = 66000,
                            PicturePath = "",
                            Warranty = "20 years",
                            BaseClock = 0,
                            TDP = 0,
                            Weight = 0,
                            Chipset = "Z390",
                            MemorySocketNumber = 4,
                            Socket = 10,
                            SupportedMemorySpeed = "2133, 2400, 2666, 2800, 3000, 3200, 3300, 3333, 3400, 3466, 3600, 3733, 3866, 4000, 4133, 4266",
                            SupportedMemoryType = 3,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("fb60813f-08cf-42de-afbb-9b7badbb2b5e"),
                            Available = 20,
                            Description = "Basic motherboard. No overcloccing here",
                            Manufacturer = "Gigabyte",
                            Name = "Gigabyte GA-B365-D3H alaplap",
                            OriginalPrice = 35000,
                            PicturePath = "",
                            Warranty = "2 years",
                            BaseClock = 0,
                            TDP = 0,
                            Weight = 0,
                            Chipset = "B365",
                            MemorySocketNumber = 0,
                            Socket = 10,
                            SupportedMemorySpeed = "2133, 2400, 2666",
                            SupportedMemoryType = 3,
                            Type = 2
                        });
                });

            modelBuilder.Entity("WebShop.Dal.Models.PowerSupply", b =>
                {
                    b.HasBaseType("WebShop.Dal.Models.Hardware");

                    b.Property<int>("ATXConnector")
                        .HasColumnType("int");

                    b.Property<int>("Efficiency")
                        .HasColumnType("int");

                    b.Property<bool>("IsModular")
                        .HasColumnType("bit");

                    b.Property<int>("MolexConnector")
                        .HasColumnType("int");

                    b.Property<int>("SixPinConnector")
                        .HasColumnType("int");

                    b.Property<int>("SixPlusTwoConnector")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("PowerSupply");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5bf1add-8aba-42c6-96b5-c8bee3d8c02b"),
                            Available = 20,
                            Description = "Cheap ass psu, dont buy this",
                            Manufacturer = "Chieftec",
                            Name = "Chieftec ECO 400W GPE-400S tápegység",
                            OriginalPrice = 13700,
                            PicturePath = "",
                            Warranty = "3 years",
                            BaseClock = 0,
                            TDP = 0,
                            Weight = 0,
                            ATXConnector = 1,
                            Efficiency = 85,
                            IsModular = false,
                            MolexConnector = 2,
                            SixPinConnector = 0,
                            SixPlusTwoConnector = 0
                        },
                        new
                        {
                            Id = new Guid("e627406d-b2ef-49c7-94a7-d1353c06f644"),
                            Available = 20,
                            Description = "You should by this not that chinesee shit",
                            Manufacturer = "FSP",
                            Name = "FSP 650W Hyper M tápegység",
                            OriginalPrice = 29790,
                            PicturePath = "",
                            Warranty = "3 years",
                            BaseClock = 0,
                            TDP = 0,
                            Weight = 0,
                            ATXConnector = 1,
                            Efficiency = 85,
                            IsModular = true,
                            MolexConnector = 3,
                            SixPinConnector = 0,
                            SixPlusTwoConnector = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WebShop.Dal.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WebShop.Dal.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebShop.Dal.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WebShop.Dal.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebShop.Dal.Models.Comment", b =>
                {
                    b.HasOne("WebShop.Dal.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebShop.Dal.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebShop.Dal.Models.CompletPC", b =>
                {
                    b.HasOne("WebShop.Dal.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebShop.Dal.Models.Cpu", "Cpu")
                        .WithMany()
                        .HasForeignKey("CpuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebShop.Dal.Models.GraphicsCard", "Gpu")
                        .WithMany()
                        .HasForeignKey("GpuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebShop.Dal.Models.Motherboard", "Motherboard")
                        .WithMany()
                        .HasForeignKey("MotherBoardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebShop.Dal.Models.PowerSupply", "PowerSupply")
                        .WithMany()
                        .HasForeignKey("PowerSupplyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("WebShop.Dal.Models.Item", b =>
                {
                    b.HasOne("WebShop.Dal.Models.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("WebShop.Dal.Models.Order", b =>
                {
                    b.HasOne("WebShop.Dal.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("WebShop.Dal.Models.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Settlement")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StreetAddress")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Order");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("WebShop.Dal.Models.Address", "ShippingAddress", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Settlement")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StreetAddress")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Order");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });
                });

            modelBuilder.Entity("WebShop.Dal.Models.PC_Drive", b =>
                {
                    b.HasOne("WebShop.Dal.Models.CompletPC", null)
                        .WithMany("Drives")
                        .HasForeignKey("CompletPCId");
                });

            modelBuilder.Entity("WebShop.Dal.Models.PC_Memory", b =>
                {
                    b.HasOne("WebShop.Dal.Models.CompletPC", null)
                        .WithMany("Memories")
                        .HasForeignKey("CompletPCId");
                });

            modelBuilder.Entity("WebShop.Dal.Models.Rating", b =>
                {
                    b.HasOne("WebShop.Dal.Models.Item", "Item")
                        .WithMany("Ratings")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebShop.Dal.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebShop.Dal.Models.User", b =>
                {
                    b.OwnsOne("WebShop.Dal.Models.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Settlement")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StreetAddress")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("WebShop.Dal.Models.Address", "ShippingAddress", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Settlement")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StreetAddress")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
